/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>

/* use helper macros to define left and right hand keys */

#include "./helper.h"
#include "./keypos_42keys.h"                // keyposition helpers
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

/* ------MOUSE MOUSE SETTINGS----- */

#define U_MOUSE_MOVE_MAX 1100                     /* <--- New max speed setting (default: 600) */

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT

#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

&mmv {
    time-to-max-speed-ms = <700>;             /* <--- How long time until max speed is reached (default: 500) */
};

/* ------------------------------- */
/* ------MOUSE WHEEL SETTINGS----- */

#define U_MOUSE_SCROLL_MAX 15                    /* <--- New max speed setting (default: 10) */

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT

#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)

&mwh {
    time-to-max-speed-ms = <2000>;                 /* <--- How long time until max speed is reached */
};

/* ------------------------------- */

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;            
            label = "HML";
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 38 37 36>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            label = "HMR";
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 41 40>;
            hold-trigger-on-release;
        };

    
        modifier_or_to_layer: modifier_or_to_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "MODIFIER_OR_TO_LAYER";
            bindings = <&MOD_LSHIFT>, <&LT(1)>;
            #binding-cells = <2>;
            hold-trigger-key-positions = <36>;
            tapping-term-ms = <200>;
         };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB         &kp Q         &kp W            &kp E                &kp R  &kp T         &kp Y      &kp U  &kp I                 &kp O             &kp P                 &kp BSPC
&kp LEFT_SHIFT  &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_COMMAND D  &kp F  &kp G         &kp H      &kp J  &hmr RIGHT_COMMAND K  &hmr RIGHT_ALT L  &hmr RCTRL SEMICOLON  &hmr RIGHT_SHIFT APOS
&kp ESCAPE      &kp Z         &kp X            &kp C                &kp V  &kp B         &kp N      &kp M  &kp COMMA             &kp DOT           &kp FSLH              &kp ESC
                                               &kp modifier_or_to_layer             &to 1  &kp RETURN    &kp SPACE  &to 2  &kp RALT
            >;
        };

        symbol {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT            &kp HASH         &kp DOLLAR             &kp PERCENT          &kp CARET  &kp AMPS   &kp ASTERISK  &kp UNDERSCORE  &none  &trans
&to 0   &kp GRAVE        &kp TILDE         &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &kp LEFT_BRACKET     &kp PIPE   &kp MINUS  &kp EQUAL     &kp PLUS        &none  &trans
&trans  &kp LESS_THAN    &kp GREATER_THAN  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET    &none      &none      &none         &none           &none  &trans
                                           &trans           &to 4                  &trans               &trans     &trans     &trans
            >;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &none      &none         &none             &none           &none     &kp PERIOD    &kp N7  &kp N8  &kp N9  &none  &trans
&to 0  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &none     &kp COMMA     &kp N4  &kp N5  &kp N6  &to 3  &none
&none  &none      &none         &none             &none           &none     &kp NUMBER_0  &kp N1  &kp N2  &kp N3  &none  &none
                                &trans            &trans          &trans    &trans        &to 5   &trans
            >;
        };

        f_keys {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &none    &kp F7  &kp F8  &kp F9  &none    &none
&to 0  &trans        &trans        &trans        &none         &none         &kp F10  &kp F4  &kp F5  &kp F6  &kp F11  &kp F12
&none  &none         &none         &none         &none         &none         &none    &kp F1  &kp F2  &kp F3  &none    &none
                                   &trans        &trans        &trans        &trans   &trans  &trans
            >;
        };

        mouse_ {
            bindings = <
&trans  &none   &mkp RCLK  &mkp MCLK  &mkp LCLK  &none     &mwh SCROLL_DOWN  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &none  &trans
&to 0   &trans  &trans     &trans     &trans     &none     &mwh SCROLL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &trans
&trans  &none   &none      &none      &none      &none     &none             &none           &none           &none            &none  &trans
                           &trans     &none      &trans    &trans            &trans          &trans
            >;
        };

        arrows_and_media {
            bindings = <
&trans  &none   &none   &none   &none           &none     &kp PAGE_UP    &none       &kp UP_ARROW  &none       &kp C_VOLUME_UP    &trans
&to 0   &trans  &trans  &trans  &kp LEFT_SHIFT  &trans    &kp PAGE_DOWN  &kp LEFT    &kp DOWN      &kp RIGHT   &kp C_VOLUME_DOWN  &trans
&trans  &none   &none   &none   &none           &none     &none          &kp C_PREV  &kp C_PP      &kp C_NEXT  &kp K_MUTE         &trans
                        &trans  &trans          &trans    &trans         &none       &trans
            >;
        };
    };
};
